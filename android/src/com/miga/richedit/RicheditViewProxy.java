/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.miga.richedit;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiC;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;
import org.appcelerator.titanium.view.TiUIView;
import android.view.LayoutInflater;
import android.content.res.Resources;
import android.view.View;
import android.app.Activity;
import com.commonsware.cwac.richedit.RichEditText;
import com.commonsware.cwac.richtextutils.SpannableStringGenerator;
import com.commonsware.cwac.richtextutils.SpannedXhtmlGenerator;
import org.xml.sax.SAXException;
import java.io.IOException;
import javax.xml.parsers.ParserConfigurationException;
import android.text.Spanned;
import com.commonsware.cwac.richtextutils.SpanTagRoster;

@Kroll.proxy(creatableInModule=TiRicheditModule.class)
public class RicheditViewProxy extends TiViewProxy
{
	// Standard Debugging variables
	private static final String LCAT = "RicheditViewProxy";
	private static final boolean DBG = TiConfig.LOGD;
	private RichEditText redit = null;
	private static SpanTagRoster tagRoster=new SpanTagRoster();
	 
	private class RichView extends TiUIView
	{
		public RichView(TiViewProxy proxy) {
			super(proxy);
			String packageName = proxy.getActivity().getPackageName();
            Resources resources = proxy.getActivity().getResources();
            View videoWrapper;
            int resId_videoHolder = -1;
            int resId_video       = -1;

            resId_videoHolder = resources.getIdentifier("layout", "layout", packageName);
            resId_video       = resources.getIdentifier("editor", "id", packageName);
            
            LayoutInflater inflater     = LayoutInflater.from(getActivity());
            videoWrapper = inflater.inflate(resId_videoHolder, null);
            if (resId_video != 0){
                redit = (RichEditText)videoWrapper.findViewById(resId_video);
				
                setNativeView(videoWrapper);
            } else {
                Log.e(LCAT, "Layout not found");
			}
		}

		@Override
		public void processProperties(KrollDict d)
		{
			super.processProperties(d);
			
			if (d.containsKey("color")) {
				if (redit != null) {
					redit.setTextColor(TiConvert.toColor(TiConvert.toString(d.get("color"))));
				}
			}
			if (d.containsKey("text")) {
				if (redit != null) {
					redit.setText(TiConvert.toString(d.get("text")));
				}
			}
			if (d.containsKey("html")) {
				if (redit != null) {
					setHtml(TiConvert.toString(d.get("html")));
				}
			}
		}
	}


	// Constructor
	public RicheditViewProxy()
	{
		super();
	}

	@Override
	public TiUIView createView(Activity activity)
	{
		TiUIView view = new RichView(this);
		view.getLayoutParams().autoFillsHeight = true;
		view.getLayoutParams().autoFillsWidth = true;
		return view;
	}

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict options)
	{
		super.handleCreationDict(options);

		if (options.containsKey("message")) {
			Log.d(LCAT, "example created with message: " + options.get("message"));
		}
	}

	// Methods
	@Kroll.method
	public void setBold()
	{
		redit.toggleEffect(RichEditText.BOLD);
	}
	// Methods
	@Kroll.method
	public void setCursiv()
	{
		redit.toggleEffect(RichEditText.ITALIC);
	}
	
	// Methods
	@Kroll.method
	public void setUnderline()
	{
		redit.toggleEffect(RichEditText.UNDERLINE);
	}
	
	
	@Kroll.getProperty @Kroll.method
	public String getHtml()
	{
        return new SpannedXhtmlGenerator(tagRoster).toXhtml(redit.getText());
	}
	
	@Kroll.setProperty @Kroll.method
	public void setHtml(String message)
	{
		try {
			Spanned span =new SpannableStringGenerator().fromXhtml(message);
			if (redit != null) {
				redit.setText(span);
			}
		} catch (SAXException e){
			
		}catch (ParserConfigurationException e){
			
		}catch (IOException e){
			
		}
	}
}
